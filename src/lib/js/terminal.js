
export default function initXTerm(){


    let term = new window.Terminal({
        //fontFamily: '"Cascadia Code", Menlo, monospace',
        cursorBlink: true,
        convertEol: true
    });

    term.open(document.getElementById('terminal'));
    term.writeln('Try running `help`.');
    term.write('\r\n$ ');

    term.onData(e => {
        switch (e) {
        case '\u0003': // Ctrl+C
            //TODO: either remove this or make it break timeouts
            term.write('^C');
            prompt(term);
            break;
        case '\r': // Enter
            runCommand(term, command);
            command = '';
            break;
        case '\u007F': // Backspace (DEL)
            if (term._core.buffer.x > 2) {
                term.write('\b \b');
                if (command.length > 0) {
                    command = command.substr(0, command.length - 1);
                }
            }
            break;
        default: // Print all other characters
            if (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\u00a0') {
                command += e;
                term.write(e);
            }
        }
    });
    

    function runCommand(term, text) {
        const input = text.trim().split(' ');
        const command = input[0];
        const param = input[1];
        const param2 = input[2];

        if (command.length > 0) {
            term.writeln('');
            if (command in commands) {
                commands[command].f(param, param2);
                return;
            }
            term.writeln(`${command}: command not found`);
        }
        prompt(term);
    }

    function prompt(term) {
        command = '';
        term.write('\r\n$ ');
    }

    var isWebglEnabled = false;
    try {
        const webgl = new window.WebglAddon.WebglAddon();
        term.loadAddon(webgl);
        isWebglEnabled = true;
    } catch (e) {
        console.warn('WebGL addon threw an exception during load', e);
    }

    let command = '';
    let commands = {
        help: {
            f: () => {
                term.writeln([
                '',
                ...Object.keys(commands).map(e => `  ${e.padEnd(10)} ${commands[e].description}`)
                ].join('\n\r'));
                prompt(term);
            },
            description: 'list available commands',
        },
        ls: {
            f: () => {
                term.writeln(['common_directories.txt', 'common_passwords.txt'].join('\r\n'));
                prompt(term);
            },
            description: 'list directory contents'
        },
        clear: {
            f: () => {
                term.clear();
                prompt(term);
            }, 
            description: 'clear the terminal'
        },
        scan: {
            f: (param) => {
                let i = 0;
                //TODO: handle the param input
                console.log(param);
                scanDirectories(i, term);
            },
            description: `scan the site for common directories and files using a wordlist \r\n ${"(Example: scan wordlist.txt)".padStart(40)}`
        },
        force: {
            f: (param1, param2) => {
                
            },
            description: `try a combination of a username with a password list at a location \r\n ${"(Example: scan john passwords.txt /account)".padStart(55)}`
        },
        ssh: {
            f: (param) => {
                
            },
            description: `SSH remote login client  \r\n ${"(Example: ssh john@192.168.0.100)".padStart(45)}`
        },
        base64: {
            f: (param1, param2) => {
                base64(param1, param2);
            },
            description: `Encode or decode base64 \r\n ${"(Example: base64 -e/-d yourinput)".padStart(46)}`
        }
    };

    let directories = ["/app", "/dev", "/account", "/secret", "robots.txt"];
    function scanDirectories(i, term) {        
        setTimeout(function() {   
            term.writeln(directories[i]);
            i++;                  
            if (i < directories.length) {           
                scanDirectories(i, term);             
            }else{
                prompt(term);                       
            }
        }, 1000)
    }

    function base64(option, input){
        if(option == '-d')
            term.write(atob(input));
        else
            term.write(btoa(input));
            
        prompt(term);
    }
}