import { v4 as uuidv4 } from 'uuid';
import crypto from 'crypto';

const algorithm = "aes-256-cbc";
const pass = '0R4UP455';
const salt = '0R4R547';
const key = crypto.randomBytes(32);
const iv = crypto.randomBytes(16);

export function get() {
    
    generateFlags();
    // TODO: update these to be a dynamic and encrypted
    return {
      body: {
        SessionName: 'Session',
        flags: generateFlags()
      }
    }
  }

  function generateFlags(){
      // TODO: configure to number of questions
      var flags = [];
      for(let i = 0; i < 5; i++)
        flags.push(generateFlag());
        
      return flags;
  }

  function generateFlag(){
    return encrypt("ORAU-{"+uuidv4()+"}");
  }

  function encrypt(text){
    let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);
    let encrypted = cipher.update(text);
    encrypted = Buffer.concat([encrypted, cipher.final()]);

    return encrypted.toString('hex');    
  }

  function decrypt(text){
    let decryptIV = Buffer.from(iv.toString('hex'), 'hex');
    let encryptedText = Buffer.from(text, 'hex');
    let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key), decryptIV);
    let decrypted = decipher.update(encryptedText);
    decrypted = Buffer.concat([decrypted, decipher.final()]);

    return decrypted.toString();
  }